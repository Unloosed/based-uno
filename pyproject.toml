[project]
name = "based-uno"
version = "0.1.0"
description = "A modern and extended version of the Uno card game."
readme = "README.md"
requires-python = ">=3.8"
license = {file = "LICENSE"}
authors = [
  {name = "Your Name / AI Agent", email = "you@example.com"},
]
keywords = ["uno", "card game", "game"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Games/Entertainment :: Card Games",
    "Operating System :: OS Independent",
]

dependencies = [
    # Core game dependencies will be minimal for now
    # e.g., "typing_extensions; python_version<'3.8'",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "black>=23.0",
    "ruff>=0.4.0", # Replaced flake8 with ruff
    "mypy>=1.0",
    "pip-tools", # For managing requirements.txt from pyproject.toml
]

[project.urls]
Homepage = "https://github.com/your-username/based-uno" # Placeholder
Repository = "https://github.com/your-username/based-uno" # Placeholder
"Bug Tracker" = "https://github.com/your-username/based-uno/issues" # Placeholder

[project.scripts]
# cli-uno = "uno_game.cli:main" # Placeholder for a future CLI entry point

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']

[tool.ruff]
line-length = 88
# Add other ruff configurations if needed, e.g., select rules.
# For now, defaults are fine. Example:
# select = ["E", "F", "W", "C90", "I"] # Common selections
# ignore = ["E203"] # If needed, though Ruff often handles Black conflicts well.

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
ignore_missing_imports = true # Initially, to handle potential gaps

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --cov=uno_game --cov-report=term-missing --cov-fail-under=80" # Example coverage settings
testpaths = [
    "uno_game/tests",
]

[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"
